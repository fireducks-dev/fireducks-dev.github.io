<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>FireDucks – Posts</title><link>https://fireducks-dev.github.io/ja/posts/</link><description>Recent content in Posts on FireDucks</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Thu, 19 Dec 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://fireducks-dev.github.io/ja/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Posts: GPU版開発におけるpandasとの互換性確保</title><link>https://fireducks-dev.github.io/ja/posts/2024-12-19-araki/</link><pubDate>Thu, 19 Dec 2024 00:00:00 +0000</pubDate><guid>https://fireducks-dev.github.io/ja/posts/2024-12-19-araki/</guid><description>
&lt;p>現在，FireDucksのGPU版の開発を進めています．&lt;/p>
&lt;p>FireDucksは，プログラムを実行時に中間言語に変換し，この中間言語上で最適化を行った後，中間言語をバックエンド向けにコンパイルし，実行するアーキテクチャになっています．現在公開されているCPU版FireDucksでは，このバックエンドがCPU向けになっています．GPU版の開発においては，バックエンドをGPUに変更します．これにより，CPU版向けに開発してきた中間言語への変換や最適化をそのまま利用することができます．&lt;/p>
&lt;p>GPU版バックエンドの開発には，NVIDIAのcuDFというライブラリを活用しています．我々の中間言語はpandasのAPIにおおむね対応しており，cuDFはpandasと類似したAPIを提供しているため，バックエンドの開発は一見容易に見えます．しかし，cuDFが提供する機能はpandasとは微妙に異なるため，pandasとの互換性を保つためには工夫が必要です．&lt;/p>
&lt;p>今回のブログ記事では，pandasとの互換性を保つためにどのような点に課題があるか，一部ですが簡単に紹介したいと思います．&lt;/p>
&lt;h2 id="結果の型が異なる">結果の型が異なる&lt;/h2>
&lt;p>pandasで日付を扱う場合，datetime64型に変換しておくと，dtというアクセサを使って年や月，日を取り出すことができます．&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>df &lt;span style="color:#f92672">=&lt;/span> pd&lt;span style="color:#f92672">.&lt;/span>DataFrame({&lt;span style="color:#e6db74">&amp;#34;a&amp;#34;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;2017-11-01 12:24:00&amp;#34;&lt;/span>]})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dfa &lt;span style="color:#f92672">=&lt;/span> pd&lt;span style="color:#f92672">.&lt;/span>to_datetime(df[&lt;span style="color:#e6db74">&amp;#34;a&amp;#34;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(dfa&lt;span style="color:#f92672">.&lt;/span>dt&lt;span style="color:#f92672">.&lt;/span>year)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>とすると&lt;code>2017&lt;/code>が返ってきます．ところでこの値の型は何でしょうか？
&lt;code>print(dfa.dt.year.dtype)&lt;/code>
とすると，pandasでは&lt;code>int32&lt;/code>，cuDfでは&lt;code>int16&lt;/code>が返ってきます．この違いはGPUのメモリ利用量を減らすための，意図的なものであるようです．&lt;/p>
&lt;p>年が16bitの値を越えることはないでしょうし，大きな問題は無いように見えますが，演算に使うとオーバーフローして結果が変わる可能性があります．例えば，0年からの時間数を求めようとして，
&lt;code>dfa.dt.year * 365 * 24&lt;/code>
などとしてしまうと，int16ではオーバーフローするため異なる結果が出てしまいます．&lt;/p>
&lt;p>この例に限らず，cuDFでは結果の型が微妙に異なることがよくあります．FireDucksではpandasとの互換性を保つため，同じ型になるように変換しています．&lt;/p>
&lt;h2 id="欠損値の演算における扱いが異なる">欠損値の演算における扱いが異なる&lt;/h2>
&lt;p>pandasでは欠損値(RDBで言うところのNULL)は基本的にNaNで表現されています．一方，cuDFでは欠損値は特別な値(NA)として扱われています．そのため，演算結果が異なることがあります．&lt;/p>
&lt;p>例えば，&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>df &lt;span style="color:#f92672">=&lt;/span> pd&lt;span style="color:#f92672">.&lt;/span>Series([&lt;span style="color:#ae81ff">1.0&lt;/span>, &lt;span style="color:#ae81ff">3.0&lt;/span>, np&lt;span style="color:#f92672">.&lt;/span>nan])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mask &lt;span style="color:#f92672">=&lt;/span> df &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">2.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print (mask)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>などとすると，pandasでは&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#66d9ef">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#66d9ef">False&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>と欠損値の所にFalseが入ります．これはnp.nanとの比較になるためです．一方，cuDFでは&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#66d9ef">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>NA&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>と演算結果も欠損値(NA)になります．RDBではNULLとの演算は常にNULLになるため，RDBの演算結果とは一致しているのですが，pandasとは一致していません．これもcuDFの仕様として意図的なものではないかと思います．&lt;/p>
&lt;p>pandasも欠損値として特別な値(pd.NA)が実験的に取り入れられており，これを用いる場合はcuDFやRDBと同じ結果になるのですが，そうでない場合は結果が異なることになります．FireDucksでは欠損値の処理結果の扱いをpandasと同じになるよう，結果を調整しています．&lt;/p>
&lt;h2 id="mergeの結果が異なる">mergeの結果が異なる&lt;/h2>
&lt;p>pandasのmergeには複雑な仕様があり，cuDFは必ずしもその仕様に準拠していないようです．将来的には変更されるかも知れませんが，現在は例えば下記のような違いがあります．&lt;/p>
&lt;p>pandasのmergeでは，mergeに用いる列の指定に&lt;code>left_on&lt;/code>や&lt;code>right_on&lt;/code>を使います．通常ここには列名を指定しますが，indexに名前がついている場合，index名を指定することもできます．また，&lt;code>left_index=True&lt;/code>や&lt;code>right_index=True&lt;/code>を指定することでもindexを指定することができます．では，これらの機能を使ってmergeを行ってみましょう．&lt;/p>
&lt;p>まず，mergeするためのDataFrameを作成します．左側は&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>idx1 &lt;span style="color:#f92672">=&lt;/span> pd&lt;span style="color:#f92672">.&lt;/span>Index([&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#ae81ff">2&lt;/span>,&lt;span style="color:#ae81ff">3&lt;/span>,&lt;span style="color:#ae81ff">4&lt;/span>],name&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;p&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df1 &lt;span style="color:#f92672">=&lt;/span> pd&lt;span style="color:#f92672">.&lt;/span>DataFrame([[&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#ae81ff">2&lt;/span>],[&lt;span style="color:#ae81ff">3&lt;/span>,&lt;span style="color:#ae81ff">4&lt;/span>],[&lt;span style="color:#ae81ff">5&lt;/span>,&lt;span style="color:#ae81ff">6&lt;/span>],[&lt;span style="color:#ae81ff">7&lt;/span>,&lt;span style="color:#ae81ff">8&lt;/span>]], columns&lt;span style="color:#f92672">=&lt;/span>[&lt;span style="color:#e6db74">&amp;#34;a&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;b&amp;#34;&lt;/span>], index&lt;span style="color:#f92672">=&lt;/span>idx1)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>で作成します．結果は&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span> a b
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>です．&lt;/p>
&lt;p>右側は&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>idx2 &lt;span style="color:#f92672">=&lt;/span> pd&lt;span style="color:#f92672">.&lt;/span>Index([&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#ae81ff">2&lt;/span>,&lt;span style="color:#ae81ff">5&lt;/span>,&lt;span style="color:#ae81ff">6&lt;/span>],name&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;q&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df2 &lt;span style="color:#f92672">=&lt;/span> pd&lt;span style="color:#f92672">.&lt;/span>DataFrame([[&lt;span style="color:#ae81ff">3&lt;/span>,&lt;span style="color:#ae81ff">4&lt;/span>],[&lt;span style="color:#ae81ff">5&lt;/span>,&lt;span style="color:#ae81ff">6&lt;/span>],[&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#ae81ff">2&lt;/span>],[&lt;span style="color:#ae81ff">3&lt;/span>,&lt;span style="color:#ae81ff">4&lt;/span>]], columns&lt;span style="color:#f92672">=&lt;/span>[&lt;span style="color:#e6db74">&amp;#34;c&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;d&amp;#34;&lt;/span>], index&lt;span style="color:#f92672">=&lt;/span>idx2)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>で作成します．結果は&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span> c d
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">6&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>です．&lt;/p>
&lt;p>では，これらをmergeしてみましょう．左側は&lt;code>left_on=[&amp;quot;p&amp;quot;]&lt;/code>でindex列を名前で指定し，右側は&lt;code>right_index=True&lt;/code>でindex列を使うことを指定しています．howには&amp;quot;outer&amp;quot;を指定してRDBで言うouter joinを行っています．&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>df1&lt;span style="color:#f92672">.&lt;/span>merge(df2, left_on&lt;span style="color:#f92672">=&lt;/span>[&lt;span style="color:#e6db74">&amp;#34;p&amp;#34;&lt;/span>], right_index&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>, how&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;outer&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>結果はpandasの場合，&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span> p a b c d
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">1.0&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">1.0&lt;/span> &lt;span style="color:#ae81ff">2.0&lt;/span> &lt;span style="color:#ae81ff">3.0&lt;/span> &lt;span style="color:#ae81ff">4.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">2.0&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#ae81ff">3.0&lt;/span> &lt;span style="color:#ae81ff">4.0&lt;/span> &lt;span style="color:#ae81ff">5.0&lt;/span> &lt;span style="color:#ae81ff">6.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">3.0&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">5.0&lt;/span> &lt;span style="color:#ae81ff">6.0&lt;/span> NaN NaN
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">4.0&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#ae81ff">7.0&lt;/span> &lt;span style="color:#ae81ff">8.0&lt;/span> NaN NaN
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NaN &lt;span style="color:#ae81ff">5&lt;/span> NaN NaN &lt;span style="color:#ae81ff">1.0&lt;/span> &lt;span style="color:#ae81ff">2.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NaN &lt;span style="color:#ae81ff">6&lt;/span> NaN NaN &lt;span style="color:#ae81ff">3.0&lt;/span> &lt;span style="color:#ae81ff">4.0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>cuDFの場合，&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span> a b c d
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>p
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>NA&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>NA&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>NA&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>NA&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>NA&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>NA&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>NA&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>NA&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>NA&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>NA&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>となります．欠損値と欠損値のある列の型が違うことはとりあえず良いとして(pandasでは欠損値にNaNを使うため，欠損値がある列はfloat64型になる），pandasには&lt;code>p&lt;/code>という列がありますが，cuDFにはありません．また結果のindexの名前が異なっています．&lt;/p>
&lt;p>&lt;code>p&lt;/code>は元々左側のDataFrameのindex列であり，これが結果のDataFrameの列として作成されるのは，奇妙な仕様のように思えます（&lt;code>p&lt;/code>のような列が生成されるのは，上記のような特別なパラメータの組合せの場合にのみ起こります）．RDBのjoinではこのような列は作成されません．一方で，結果は明らかに異なるため，ユーザプログラムの互換性上問題になる可能性があります．&lt;/p>
&lt;p>FireDucksではこのような場合にもpandasとできるだけ同じ結果になるように調整しています．&lt;/p>
&lt;p>以上のように，pandasとcuDFでは結果が異なる場合があります．FireDucksのGPU版ではこのような差異を吸収し，できるだけpandasと同じ結果が生成されるように実装を行っています．FireDucksのGPU版はまだ開発中でユーザの皆様が使える状態ではありませんが，開発が完了したら是非お試し頂ければと思います．&lt;/p></description></item><item><title>Posts: FireDucksが遅いと思ったら</title><link>https://fireducks-dev.github.io/ja/posts/beginner_guide/</link><pubDate>Tue, 05 Nov 2024 00:00:00 +0000</pubDate><guid>https://fireducks-dev.github.io/ja/posts/beginner_guide/</guid><description>
&lt;h2 id="fireducksが遅いと思ったら">FireDucksが遅いと思ったら&lt;/h2>
&lt;p>FireDucksに興味を持っていただきありがとうございます．
&lt;!-- raw HTML omitted -->この記事ではFireDucksを利用してプログラムが遅いと感じた場合，その考えられる原因と対処方法について記載します．&lt;/p>
&lt;p>早速ですがプログラムが遅いと感じた場合，考えられる原因は大きく分けて２つあります．&lt;/p>
&lt;ol>
&lt;li>applyの利用もしくはループ処理の使用している．&lt;/li>
&lt;li>FireDucksで未実装のpandasの機能を使用している．&lt;/li>
&lt;/ol>
&lt;p>原因1の場合，ソースコード変更によってプログラムの性能が大きく向上する可能性があります．
例えばループ処理の使用の場合&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>sum_val &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(len(df)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> df[&lt;span style="color:#e6db74">&amp;#34;A&amp;#34;&lt;/span>][i] &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sum_val &lt;span style="color:#f92672">+=&lt;/span> df[&lt;span style="color:#e6db74">&amp;#34;B&amp;#34;&lt;/span>][i]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>と書いてあるコードを&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>sum_val &lt;span style="color:#f92672">=&lt;/span> df[df[&lt;span style="color:#e6db74">&amp;#34;A&amp;#34;&lt;/span>] &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>][&lt;span style="color:#e6db74">&amp;#34;B&amp;#34;&lt;/span>]&lt;span style="color:#f92672">.&lt;/span>sum()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>と書き換えることでpandasレベルでの高速化及びFireDucksでの高速化が期待できます．&lt;/p>
&lt;p>自分で確かめるのが難しい，ソースコードが複雑で適切な変更方法が思いつかないといった場合，FireDucksのコミュニティを運営していますので下記記載のslackから是非相談してみてください．&lt;/p>
&lt;p>原因2の場合すぐに高速化ができるわけではありませんが，未実装のpandas機能を報告していただけますと，我々がその機能をFireDucksに実装することで，プログラムの高速化できます．&lt;/p>
&lt;p>未実装かどうかを判定するためには，プログラム実行前に環境変数&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>FIREDUCKS_FLAGS&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;-Wfallback&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>を設定していただき，そのままpandasプログラムを実行してください．
注目しているpandas関数についてFallbackと書かれていた場合，それは未実装のpandasの機能ですので報告をしていただけるとありがたいです．
報告の方法は以下です．&lt;/p>
&lt;ul>
&lt;li>🦆github : &lt;a href="https://github.com/fireducks-dev/fireducks/issues/new">https://github.com/fireducks-dev/fireducks/issues/new&lt;/a>&lt;/li>
&lt;li>📧mail : &lt;a href="mailto:contact@fireducks.jp.nec.com">contact@fireducks.jp.nec.com&lt;/a>&lt;/li>
&lt;li>🤝slack : &lt;a href="https://join.slack.com/t/fireducks/shared_invite/zt-2j4lucmtj-IGR7AWlXO62Lu605pnBJ2w">https://join.slack.com/t/fireducks/shared_invite/zt-2j4lucmtj-IGR7AWlXO62Lu605pnBJ2w&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Fallbackの調査が難しい場合でもお気軽にコンタクトを取っていただければ幸いです．
&lt;!-- raw HTML omitted -->
以上で記事を終えます．ここまで読んでいただきありがとうございました．&lt;/p></description></item><item><title>Posts: pandasを用いた大規模データの前処理をfireducksに置き換えてみる</title><link>https://fireducks-dev.github.io/ja/posts/2024-05-27-note10/</link><pubDate>Mon, 27 May 2024 00:00:00 +0000</pubDate><guid>https://fireducks-dev.github.io/ja/posts/2024-05-27-note10/</guid><description/></item><item><title>Posts: 生成AIとデータフレーム高速化技術を組み合わせたら、データ分析が爆楽になった話</title><link>https://fireducks-dev.github.io/ja/posts/2024-05-20-note09/</link><pubDate>Mon, 20 May 2024 00:00:00 +0000</pubDate><guid>https://fireducks-dev.github.io/ja/posts/2024-05-20-note09/</guid><description/></item><item><title>Posts: Pandasを高速化方法比較</title><link>https://fireducks-dev.github.io/ja/posts/2024-05-13-note08/</link><pubDate>Mon, 13 May 2024 00:00:00 +0000</pubDate><guid>https://fireducks-dev.github.io/ja/posts/2024-05-13-note08/</guid><description/></item><item><title>Posts: どれくらいスピードアップしたのか</title><link>https://fireducks-dev.github.io/ja/posts/2024-05-08-note07/</link><pubDate>Wed, 08 May 2024 00:00:00 +0000</pubDate><guid>https://fireducks-dev.github.io/ja/posts/2024-05-08-note07/</guid><description/></item><item><title>Posts: FireDucks と Polarsを比較してみた</title><link>https://fireducks-dev.github.io/ja/posts/2024-04-22-note06/</link><pubDate>Mon, 22 Apr 2024 00:00:00 +0000</pubDate><guid>https://fireducks-dev.github.io/ja/posts/2024-04-22-note06/</guid><description/></item><item><title>Posts: FireDucks性能評価</title><link>https://fireducks-dev.github.io/ja/posts/2024-04-15-note05/</link><pubDate>Mon, 15 Apr 2024 00:00:00 +0000</pubDate><guid>https://fireducks-dev.github.io/ja/posts/2024-04-15-note05/</guid><description/></item><item><title>Posts: pandasの代替案: Fireducks,Vaex, Polars, Modinを徹底比較！どれが最適？</title><link>https://fireducks-dev.github.io/ja/posts/2024-04-09-note04/</link><pubDate>Tue, 09 Apr 2024 00:00:00 +0000</pubDate><guid>https://fireducks-dev.github.io/ja/posts/2024-04-09-note04/</guid><description/></item><item><title>Posts: AWS GlueでFireDucksを使ってPandasを高速化する</title><link>https://fireducks-dev.github.io/ja/posts/2024-04-01-note03/</link><pubDate>Mon, 01 Apr 2024 00:00:00 +0000</pubDate><guid>https://fireducks-dev.github.io/ja/posts/2024-04-01-note03/</guid><description/></item><item><title>Posts: FireDucks入門: 学習コストゼロでpandasを超えるパフォーマンスを手に入れる!</title><link>https://fireducks-dev.github.io/ja/posts/2024-03-22-note02/</link><pubDate>Fri, 22 Mar 2024 00:00:00 +0000</pubDate><guid>https://fireducks-dev.github.io/ja/posts/2024-03-22-note02/</guid><description/></item><item><title>Posts: pandas高速化の新星、FireDucksに迫る</title><link>https://fireducks-dev.github.io/ja/posts/2024-03-15-note/</link><pubDate>Tue, 05 Mar 2024 00:00:00 +0000</pubDate><guid>https://fireducks-dev.github.io/ja/posts/2024-03-15-note/</guid><description/></item><item><title>Posts: FireDucks vs Polars 42勝24敗！ あなたはどっちを使ってpandasを高速化する！？</title><link>https://fireducks-dev.github.io/ja/posts/2023-12-24-ishizaka/</link><pubDate>Sun, 24 Dec 2023 00:00:00 +0000</pubDate><guid>https://fireducks-dev.github.io/ja/posts/2023-12-24-ishizaka/</guid><description/></item><item><title>Posts: FireDucks に隠し機能を作ろうと思ったけどボツになった話</title><link>https://fireducks-dev.github.io/ja/posts/2023-12-20-daido/</link><pubDate>Wed, 20 Dec 2023 00:00:00 +0000</pubDate><guid>https://fireducks-dev.github.io/ja/posts/2023-12-20-daido/</guid><description/></item><item><title>Posts: FireDucksにおける最適化処理の紹介</title><link>https://fireducks-dev.github.io/ja/posts/2023-12-18-araki/</link><pubDate>Mon, 18 Dec 2023 00:00:00 +0000</pubDate><guid>https://fireducks-dev.github.io/ja/posts/2023-12-18-araki/</guid><description/></item><item><title>Posts: FireDucksを支える技術</title><link>https://fireducks-dev.github.io/ja/posts/2023-12-15-ishizaka/</link><pubDate>Fri, 15 Dec 2023 00:00:00 +0000</pubDate><guid>https://fireducks-dev.github.io/ja/posts/2023-12-15-ishizaka/</guid><description/></item><item><title>Posts: FireDucks の GroupBy アルゴリズム切替えについての解説</title><link>https://fireducks-dev.github.io/ja/posts/2023-12-08-ohno/</link><pubDate>Fri, 08 Dec 2023 00:00:00 +0000</pubDate><guid>https://fireducks-dev.github.io/ja/posts/2023-12-08-ohno/</guid><description/></item><item><title>Posts: FireDucks内部で働く高速化技術</title><link>https://fireducks-dev.github.io/ja/posts/est/</link><pubDate>Tue, 05 Dec 2023 00:00:00 +0900</pubDate><guid>https://fireducks-dev.github.io/ja/posts/est/</guid><description>
&lt;h2 id="groupbyの切り替え">groupbyの切り替え&lt;/h2>
&lt;p>この記事ではFireDucks内部で使われているgroupby高速化技術について紹介します．&lt;/p>
&lt;p>表データ分析においてgroupby操作は最も基本的で重要な操作の一つです．
groupby操作を用いることでデータの平均や分散といった重要な統計的性質を知ることができ，
その他操作と組み合わせることで新しい特徴量を得ることもできます．&lt;/p>
&lt;p>FireDucksでは高速なgroupby操作を実現するためにデータ特性に応じた最適化を行っています．
その一つがグループ数によるgroupbyアルゴリズムの自動選択です．
具体的にはデータのグループ数に注目しグループ数が小さいデータに対して高速に計算可能な
アルゴリズム(アルゴリズムAと呼ぶ)と，
グループ数が大きいデータに対して高速に計算可能なアルゴリズム(アルゴリズムBと呼ぶ)とを切り替えています．
ここでグループ数とは注目するカラムを構成するデータの種類を示します．&lt;/p>
&lt;p>例えば以下のような表データを考えてみましょう．&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>food&lt;/th>
&lt;th>category&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>0&lt;/td>
&lt;td>apple&lt;/td>
&lt;td>fruit&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>carrot&lt;/td>
&lt;td>vegetable&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>peach&lt;/td>
&lt;td>fruit&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>onion&lt;/td>
&lt;td>vegetable&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4&lt;/td>
&lt;td>grape&lt;/td>
&lt;td>fruit&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>foodカラムを構成する要素に注目するとapple, carrot, peach, onion, grapeの5種類であることが分かります．
よってfoodカラムのグループ数は5です．
一方で，categoryカラムを構成する要素に注目するとfruit,vegetableの2種類であることが分かります．
よってcategoryカラムのグループ数は2です．&lt;/p>
&lt;h2 id="グループ数の推定">グループ数の推定&lt;/h2>
&lt;p>巨大なデータを扱うときに実際にデータを全て確認してグループ数を計算すると時間がかかります．
そこで，FireDucksではグループ数の厳密な値を求めることなく統計的手法を用いてグループ数の推定を行っています&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>．
具体的には以下の手順で行われます．&lt;/p>
&lt;ol>
&lt;li>注目するグループキーのデータ列の中からランダムにデータを一つ取り出す．&lt;/li>
&lt;li>取り出したデータを記録する．&lt;/li>
&lt;li>再び注目するグループキーのデータ列の中からランダムにデータを一つ取り出す，&lt;/li>
&lt;li>すでに記録してあるデータと一致するか判定を行い，データを記録する．&lt;/li>
&lt;li>3,4の操作を一定回数繰り返す．&lt;/li>
&lt;/ol>
&lt;p>3と4の操作を一定回数繰り返した後，データを取り出した回数と一致した回数から
注目するグループキーのデータのグループ数を推定する．&lt;/p>
&lt;h2 id="性能評価">性能評価&lt;/h2>
&lt;p>データ分析に関する多くの処理を含むベンチマークであるTPC-Hを用いて計算速度の計測を行いました．&lt;/p>
&lt;p>&lt;img src="compare.png" alt="compare">&lt;/p>
&lt;p>Aはgroupby操作をアルゴリズムAのみを用いており，Bはgroupby操作をアルゴリズムBのみを用いています．
autoはgroupby操作についてグループ数の推定とアルゴリズムAとBの自動選択をしています．
アルゴリズムAとアルゴリズムBの実行時間にほとんど差がない処理については上のグラフでは省略しています．
グラフから，q10を除く処理で自動判定アルゴリズムは，アルゴリズムAとアルゴリズムBのうち速い方のアルゴリズムの選択ができていることが分かります．
totalはアルゴリズムA,アルゴリズムB,自動選択アルゴリズムについて上記グラフから除いた処理も含めたTPC-H全体の計算時間を示しています．
このことからTPC-H全体において，自動判定アルゴリズムはアルゴリズムAに対して3倍程度高速化ができており，
アルゴリズムBに対しては1.2倍程度高速化ができていることが分かります．&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>M. Bressan, E. Peserico, and L. Pretto. Simple set cardinality estimation through random sampling. CoRR, abs/1512.07901, 2015.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Posts: FireDucksのご紹介</title><link>https://fireducks-dev.github.io/ja/posts/2023-12-04-ishizaka/</link><pubDate>Mon, 04 Dec 2023 00:00:00 +0000</pubDate><guid>https://fireducks-dev.github.io/ja/posts/2023-12-04-ishizaka/</guid><description/></item><item><title>Posts: FireDucks のインポートフック機能にまつわるエトセトラ</title><link>https://fireducks-dev.github.io/ja/posts/2023-12-01-daido/</link><pubDate>Fri, 01 Dec 2023 00:00:00 +0000</pubDate><guid>https://fireducks-dev.github.io/ja/posts/2023-12-01-daido/</guid><description/></item><item><title>Posts: インポートフック：ソースコードを書き換えずに FireDucks を使う方法のご紹介</title><link>https://fireducks-dev.github.io/ja/posts/importhook/</link><pubDate>Wed, 15 Nov 2023 09:35:10 +0900</pubDate><guid>https://fireducks-dev.github.io/ja/posts/importhook/</guid><description>
&lt;p>FireDucks 開発チームの大道です．今日は開発者ブログとして，FireDucks に備わっているインポートフック機能をご紹介したいと思います．この機能を使えば，お手持ちのソースコードを1行も書き換えることなく FireDucks を使うことができるようになります．&lt;/p>
&lt;p>コマンドラインから Python ファイルを実行する際の使い方と，IPython や Jupyter Notebook での使い方を見ていきましょう．&lt;/p>
&lt;h1 id="インポートフックとは">インポートフックとは？&lt;/h1>
&lt;p>FireDucks はオリジナルの pandas と同じように振る舞うため，インポート文を以下のように書き換えるだけで簡単に使い始めることができます．&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># import pandas as pd&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> fireducks.pandas &lt;span style="color:#66d9ef">as&lt;/span> pd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>しかしたかが1行書き換えるだけとはいえ，今まで作成してきたプログラムで pandas を使用している部分を探して全部 FireDucks に置き換えるのは，意外と面倒くさいものです．また，pandas と連携するサードパーティライブラリでも FireDucks を使用したい場合，そのライブラリの中にまで手を入れて &lt;code>import pandas&lt;/code> を書き換える作業は，普通はしたくないでしょう．&lt;/p>
&lt;p>&lt;a href="https://fireducks-dev.github.io/ja/docs/get-started/#import-hook">Get Started&lt;/a> でも触れられている通り，FireDucks にはインポートフックというユーティリティが含まれています．コマンドラインで &lt;code>your_script.py&lt;/code> を実行する際に，Python インタープリターに以下のようにオプションを指定してください．&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>python3 -m fireducks.imhook your_script.py
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>以上のようにして起動すると，&lt;code>pandas&lt;/code> をインポートしようとしたら代わりに &lt;code>fireducks.pandas&lt;/code> がインポートされるようになります．これは &lt;code>your_script.py&lt;/code> のソースコードを編集しているわけではなく，プログラムを実行しながら動的にインポート処理に割り込んでいます．&lt;/p>
&lt;h2 id="インポートフックの動作例">インポートフックの動作例&lt;/h2>
&lt;p>以下のような簡単な Python スクリプト &lt;code>print_classname.py&lt;/code> で動作を確認してみましょう．このスクリプトでは DataFrame クラスの repr 表現が出力されます．&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> pandas &lt;span style="color:#66d9ef">as&lt;/span> pd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(pd&lt;span style="color:#f92672">.&lt;/span>DataFrame)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>普通に実行すると以下のような出力ですが…．&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ python3 print_classname.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;class &lt;span style="color:#e6db74">&amp;#39;pandas.core.frame.DataFrame&amp;#39;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>インポートフック機能を使って実行すると以下のような出力に変わります！ 🥳&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ python3 -m fireducks.imhook print_classname.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;class &lt;span style="color:#e6db74">&amp;#39;fireducks.pandas.frame.DataFrame&amp;#39;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ソースコードを編集していないのに FireDucks のデータフレームが使えるようになっていることがわかります．&lt;/p>
&lt;h2 id="制限事項">制限事項&lt;/h2>
&lt;h3 id="shebang-未対応">shebang 未対応&lt;/h3>
&lt;p>現在のところ，shebang (&lt;code>#!...&lt;/code>) による実行には対応していません．&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/usr/bin/python3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> pandas &lt;span style="color:#66d9ef">as&lt;/span> pd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(pd&lt;span style="color:#f92672">.&lt;/span>DataFrame)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Python インタープリターに &lt;code>-m&lt;/code> オプションを指定できないため，インポートフックを有効化できません（そりゃそうだ）．&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ chmod +x print_classname_shebang.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ./print_classname_shebang.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;class &lt;span style="color:#e6db74">&amp;#39;pandas.core.frame.DataFrame&amp;#39;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="他のモジュール実行オプションとの同時指定不可">他のモジュール実行オプションとの同時指定不可&lt;/h3>
&lt;p>Python インタープリターの起動時には &lt;code>-m&lt;/code> オプションはひとつしか指定できないため，&lt;code>-m&lt;/code> オプションを使って起動する他のツールと同時に使うことはできません．&lt;/p>
&lt;h3 id="サブプロセス非対応">サブプロセス非対応&lt;/h3>
&lt;p>&lt;code>subprocess&lt;/code> モジュールを使って Python プロセスを新たに起動した場合，そのサブプロセスにインポートフックの設定は受け継がれません．&lt;/p>
&lt;h1 id="jupyter-notebook-での使い方">Jupyter Notebook での使い方&lt;/h1>
&lt;p>インポートフックは Jupyter Notebook でも利用することができます．ただし現在のところ，Jupyter を起動する際のオプションとしては利用できず，ノートブックの最初のセルで明示的に有効化する必要があります．&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> fireducks.importhook
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fireducks&lt;span style="color:#f92672">.&lt;/span>importhook&lt;span style="color:#f92672">.&lt;/span>activate_hook(&lt;span style="color:#e6db74">&amp;#34;fireducks.pandas&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;pandas&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>自分で書いたノートブック内で pandas をインポートするだけならインポートフックを使うメリットはあまりないかもしれません．しかし，pandas と連携するようなサードパーティライブラリの中ででもインポートフックは働くため，そのようなライブラリをノートブックから使用する場合に便利です．&lt;/p>
&lt;p>無効化する場合は以下の関数を実行してください．&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>fireducks&lt;span style="color:#f92672">.&lt;/span>importhook&lt;span style="color:#f92672">.&lt;/span>deactivate_hook()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ただし，オリジナルの pandas のデータフレームと FireDucks のデータフレームを混ぜて使うと（恐らく複雑怪奇なエラーメッセージとともに）エラーが発生します．基本的には一度インポートフックを有効化したら有効化しっぱなしにしておきましょう．&lt;/p>
&lt;h2 id="ipython-cli-での起動方法">IPython CLI での起動方法&lt;/h2>
&lt;p>IPython の場合，先述した Jupyter Notebook での使い方と同じように手動で有効化してもいいのですが，bash などでは以下のようにして IPython CLI を起動することもできます．&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>python3 -m fireducks.imhook &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>which ipython&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>うーん…，ちょっと無理矢理ですね！&lt;/p>
&lt;h1 id="まとめにかえて">まとめにかえて&lt;/h1>
&lt;p>FireDucks はまだまだ研究開発中のソフトウェアで，pandas で動いていたプログラムで FireDucks を使うように変更しても，エラーになってしまって動かない部分があるかもしれません．私たち FireDucks 開発チームではベータ版を公開してからも日々機能改善に取り組んでおり，エラー報告など，皆さんからのフィードバックをお待ちしております．&lt;a href="https://fireducks-dev.github.io/ja/docs/help/contact/">連絡先はこちら&lt;/a>を参照してください．&lt;/p>
&lt;p>以上，ソースコードを1行も書き換えずに FireDucks を使う方法のご紹介でした．FireDucks を使ってみたいと思った方は &lt;a href="https://fireducks-dev.github.io/ja/docs/get-started/">Get Started&lt;/a> や&lt;a href="https://fireducks-dev.github.io/ja/docs/user-guide/01-intro/">ユーザーガイド&lt;/a>，pandas との速度比較が気になる方は&lt;a href="https://fireducks-dev.github.io/ja/docs/benchmarks/">ベンチマーク&lt;/a>も読んでみてくださいね．&lt;/p>
&lt;p>May the Acceleration be with you,&lt;!-- raw HTML omitted -->
FireDucks 開発チーム&lt;/p></description></item><item><title>Posts: Pythonの高速データフレームライブラリFireDucksを使ってみた</title><link>https://fireducks-dev.github.io/ja/posts/nes_taxi/</link><pubDate>Mon, 23 Oct 2023 08:47:36 +0000</pubDate><guid>https://fireducks-dev.github.io/ja/posts/nes_taxi/</guid><description>
&lt;p>pandasは，プログラミング言語Pythonにおいて，データ解析を支援する機能を提供するライブラリである．
NECの研究所では高速化版pandasであるFireDucksというライブラリを開発している．&lt;/p>
&lt;h2 id="データの準備">データの準備&lt;/h2>
&lt;p>ニューヨークのタクシーの乗降者履歴のデータを対象に分析を行う．
データの出典は以下である：&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://www.nyc.gov/site/tlc/about/tlc-trip-record-data.page">https://www.nyc.gov/site/tlc/about/tlc-trip-record-data.page&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>大規模データの解析を行うため，上記リンクから「Yellow Taxi Trip Records」を2022年1月から2023年6月までのデータをダウンロードし結合した．
データはparquet形式で提供されているが，日頃良く使うcsv形式で試すために変換しておく．
参考までにデータ準備用のスクリプトを付記しておく．&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> pandas &lt;span style="color:#66d9ef">as&lt;/span> pd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> os
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dir &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;xxx&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df_list &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> year &lt;span style="color:#f92672">in&lt;/span> [&lt;span style="color:#ae81ff">2022&lt;/span>, &lt;span style="color:#ae81ff">2023&lt;/span>]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">12&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>month &lt;span style="color:#f92672">=&lt;/span> str(i&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>zfill(&lt;span style="color:#ae81ff">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fn &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;yellow_tripdata_&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>year&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">-&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>month&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">.parquet&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>file &lt;span style="color:#f92672">=&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>join(dir, fn)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">not&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>exists(file):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df &lt;span style="color:#f92672">=&lt;/span> pd&lt;span style="color:#f92672">.&lt;/span>read_parquet(fn)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df_list&lt;span style="color:#f92672">.&lt;/span>append(df)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>all_df &lt;span style="color:#f92672">=&lt;/span> pd&lt;span style="color:#f92672">.&lt;/span>concat(df_list)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>all_df&lt;span style="color:#f92672">.&lt;/span>to_csv(&lt;span style="color:#e6db74">&amp;#34;taxi_all.csv&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>データの中身は以下のような値が入っている（列は一部抜粋）．&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>列名&lt;/th>
&lt;th>&lt;!-- raw HTML omitted -->データ型&lt;!-- raw HTML omitted -->&lt;/th>
&lt;th>説明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>passenger_count&lt;/code>&lt;/td>
&lt;td>int&lt;/td>
&lt;td>乗車人数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>pu_location_Id&lt;/code>&lt;/td>
&lt;td>string&lt;/td>
&lt;td>タクシーメーターが作動し始めたTLCタクシーゾーン．&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>do_location_Id&lt;/code>&lt;/td>
&lt;td>string&lt;/td>
&lt;td>タクシーメーターが解除されたTLCタクシーゾーン．&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>tpep_dropoff_datetime&lt;/code>&lt;/td>
&lt;td>string&lt;/td>
&lt;td>メーターが解除された日時．&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>tpep_pickupdate_time&lt;/code>&lt;/td>
&lt;td>string&lt;/td>
&lt;td>メーターが作動し始めた日時．&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>trip_distance&lt;/code>&lt;/td>
&lt;td>double&lt;/td>
&lt;td>タクシーメーターによって報告された走行距離（マイル単位）．&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>total_amount&lt;/code>&lt;/td>
&lt;td>double&lt;/td>
&lt;td>乗客に請求される合計金額． ※現金のチップは含まれない．&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>extra&lt;/code>&lt;/td>
&lt;td>double&lt;/td>
&lt;td>その他の割増料金と追加料金．現在，これには0.50ドルおよび1ドルのラッシュアワー料金と夜間料金のみが含まれる．&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>fare_amount&lt;/code>&lt;/td>
&lt;td>double&lt;/td>
&lt;td>メーターによって計算された時間距離併用運賃．&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="実際に行う前処理">実際に行う前処理&lt;/h2>
&lt;p>用意したデータに対して，データ分析でよく利用される型変換，列追加，異常値削除などの一連の前処理計算を行う．&lt;/p>
&lt;p>まず速度計測用のラッパーを用意しておく．
&lt;code>_evaluate()&lt;/code>については後述する．&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> time &lt;span style="color:#f92672">import&lt;/span> time
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> functools &lt;span style="color:#f92672">import&lt;/span> wraps
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">timer&lt;/span>(func):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@wraps&lt;/span>(func)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">wp&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>args, &lt;span style="color:#f92672">**&lt;/span>kargs):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>t &lt;span style="color:#f92672">=&lt;/span> time()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ret &lt;span style="color:#f92672">=&lt;/span> func(&lt;span style="color:#f92672">*&lt;/span>args, &lt;span style="color:#f92672">**&lt;/span>kargs)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>func&lt;span style="color:#f92672">.&lt;/span>__name__&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> : &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>(time() &lt;span style="color:#f92672">-&lt;/span> t)&lt;span style="color:#e6db74">:&lt;/span>&lt;span style="color:#e6db74">.5g&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> [sec]&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">return&lt;/span> ret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">return&lt;/span> wp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">evaluate&lt;/span>(df):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> hasattr(df, &lt;span style="color:#e6db74">&amp;#34;_evaluate&amp;#34;&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df&lt;span style="color:#f92672">.&lt;/span>_evaluate()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="データの読み込み">データの読み込み&lt;/h3>
&lt;p>まずはデータを読み込む．
pandasをimportしてから&lt;code>read_csv&lt;/code>で読み込む．
関数だけ定義しておいて，後で纏めて呼び出して計測する．&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> pandas &lt;span style="color:#66d9ef">as&lt;/span> pd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@timer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">file_read&lt;/span>(fn, args&lt;span style="color:#f92672">=&lt;/span>{}):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df &lt;span style="color:#f92672">=&lt;/span> pd&lt;span style="color:#f92672">.&lt;/span>read_csv(fn, &lt;span style="color:#f92672">**&lt;/span>args)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>evaluate(df)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(df&lt;span style="color:#f92672">.&lt;/span>shape)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">return&lt;/span> df
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="データ処理">データ処理&lt;/h3>
&lt;p>欠損値があるデータを削除する．&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@timer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">drop_na&lt;/span>(df):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df&lt;span style="color:#f92672">.&lt;/span>dropna(how&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;all&amp;#34;&lt;/span>, inplace&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>evaluate(df)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">return&lt;/span> df
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>乗車，降車の年月日時はstring型で読み込んだので，日付型に変換しておく．&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@timer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">txt_to_date&lt;/span>(df, low):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df[low] &lt;span style="color:#f92672">=&lt;/span> pd&lt;span style="color:#f92672">.&lt;/span>to_datetime(df[low])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>evaluate(df)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">return&lt;/span> df
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>乗車数でgroupbyして分布を見てみる（printは性能評価に含めないので省略）．
乗車数0人のデータがあることが分かるので，削除する．&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 一人以上乗車している&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@timer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">check_passenger_c&lt;/span>(df):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df_ &lt;span style="color:#f92672">=&lt;/span> df&lt;span style="color:#f92672">.&lt;/span>groupby(&lt;span style="color:#e6db74">&amp;#34;passenger_count&amp;#34;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>size()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>evaluate(df_)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df &lt;span style="color:#f92672">=&lt;/span> df[df[&lt;span style="color:#e6db74">&amp;#34;passenger_count&amp;#34;&lt;/span>] &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>evaluate(df)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">return&lt;/span> df
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>乗車日時の日付データから，年，月，日，時の情報を取り出し，列を追加する．
乗車年や月の分布を見てみると不適切な値が含まれているので，削除する．&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 乗車年/月が正しい&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@timer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">check_pu_date&lt;/span>(df):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df[&lt;span style="color:#e6db74">&amp;#39;year&amp;#39;&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> df[&lt;span style="color:#e6db74">&amp;#39;tpep_pickup_datetime&amp;#39;&lt;/span>]&lt;span style="color:#f92672">.&lt;/span>dt&lt;span style="color:#f92672">.&lt;/span>year
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df[&lt;span style="color:#e6db74">&amp;#39;month&amp;#39;&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> df[&lt;span style="color:#e6db74">&amp;#39;tpep_pickup_datetime&amp;#39;&lt;/span>]&lt;span style="color:#f92672">.&lt;/span>dt&lt;span style="color:#f92672">.&lt;/span>month
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df[&lt;span style="color:#e6db74">&amp;#39;date&amp;#39;&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> df[&lt;span style="color:#e6db74">&amp;#39;tpep_pickup_datetime&amp;#39;&lt;/span>]&lt;span style="color:#f92672">.&lt;/span>dt&lt;span style="color:#f92672">.&lt;/span>day
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df[&lt;span style="color:#e6db74">&amp;#39;hour&amp;#39;&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> df[&lt;span style="color:#e6db74">&amp;#39;tpep_pickup_datetime&amp;#39;&lt;/span>]&lt;span style="color:#f92672">.&lt;/span>dt&lt;span style="color:#f92672">.&lt;/span>hour
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df_ &lt;span style="color:#f92672">=&lt;/span> df&lt;span style="color:#f92672">.&lt;/span>groupby(&lt;span style="color:#e6db74">&amp;#34;year&amp;#34;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>size()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>evaluate(df_)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df &lt;span style="color:#f92672">=&lt;/span> df[(df[&lt;span style="color:#e6db74">&amp;#39;year&amp;#39;&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">2022&lt;/span>) &lt;span style="color:#f92672">|&lt;/span> (df[&lt;span style="color:#e6db74">&amp;#39;year&amp;#39;&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">2023&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df_ &lt;span style="color:#f92672">=&lt;/span> df&lt;span style="color:#f92672">.&lt;/span>groupby(&lt;span style="color:#e6db74">&amp;#34;month&amp;#34;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>size()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>evaluate(df_)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df &lt;span style="color:#f92672">=&lt;/span> df[(df[&lt;span style="color:#e6db74">&amp;#39;month&amp;#39;&lt;/span>] &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#f92672">&amp;amp;&lt;/span> df[&lt;span style="color:#e6db74">&amp;#39;month&amp;#39;&lt;/span>] &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">12&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df_ &lt;span style="color:#f92672">=&lt;/span> df&lt;span style="color:#f92672">.&lt;/span>groupby([&lt;span style="color:#e6db74">&amp;#34;year&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;month&amp;#34;&lt;/span>])&lt;span style="color:#f92672">.&lt;/span>size()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>evaluate(df_)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>evaluate(df)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">return&lt;/span> df
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>降車時間と乗車時間の差を分に変換して列を追加する．
非正の乗車時間や長すぎる乗車時間を削除する．&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 現実的な乗車時間（分）&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@timer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">check_ride_time&lt;/span>(df):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df[&lt;span style="color:#e6db74">&amp;#34;ride_time&amp;#34;&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> (df[&lt;span style="color:#e6db74">&amp;#34;tpep_dropoff_datetime&amp;#34;&lt;/span>] &lt;span style="color:#f92672">-&lt;/span> df[&lt;span style="color:#e6db74">&amp;#34;tpep_pickup_datetime&amp;#34;&lt;/span>])&lt;span style="color:#f92672">.&lt;/span>dt&lt;span style="color:#f92672">.&lt;/span>seconds &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">60&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df &lt;span style="color:#f92672">=&lt;/span> df[(df[&lt;span style="color:#e6db74">&amp;#34;ride_time&amp;#34;&lt;/span>] &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#f92672">&amp;amp;&lt;/span> (df[&lt;span style="color:#e6db74">&amp;#34;ride_time&amp;#34;&lt;/span>] &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">180&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>evaluate(df)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">return&lt;/span> df
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>乗車距離や運賃についても非負や大きすぎる値を削除する．&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 現実的な距離&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@timer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">check_trip_distance&lt;/span>(df):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df &lt;span style="color:#f92672">=&lt;/span> df[(df[&lt;span style="color:#e6db74">&amp;#34;trip_distance&amp;#34;&lt;/span>] &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#f92672">&amp;amp;&lt;/span> (df[&lt;span style="color:#e6db74">&amp;#34;trip_distance&amp;#34;&lt;/span>] &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">250&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>evaluate(df)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">return&lt;/span> df
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 現実的な運賃&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@timer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">check_total_amount&lt;/span>(df):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df &lt;span style="color:#f92672">=&lt;/span> df[(df[&lt;span style="color:#e6db74">&amp;#34;total_amount&amp;#34;&lt;/span>] &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#f92672">&amp;amp;&lt;/span> (df[&lt;span style="color:#e6db74">&amp;#34;total_amount&amp;#34;&lt;/span>] &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">1000&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>evaluate(df)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">return&lt;/span> df
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>乗降車地点のIDから緯度経度を算出する．
IDと地点の関係は以下で確認することができる．&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://d37ci6vzurychx.cloudfront.net/misc/taxi+_zone_lookup.csv">https://d37ci6vzurychx.cloudfront.net/misc/taxi+_zone_lookup.csv&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>緯度経度は，&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://d37ci6vzurychx.cloudfront.net/misc/taxi_zones.zip">https://d37ci6vzurychx.cloudfront.net/misc/taxi_zones.zip&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>をもとに作成した変換テーブルをmergeすることで列を追加する．&lt;/p>
&lt;p>緯度経度の情報からニューヨーク市外のデータを削除する．&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># IDから緯度経度を割り出す&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@timer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">add_coordinate&lt;/span>(df, ID_df):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df &lt;span style="color:#f92672">=&lt;/span> df&lt;span style="color:#f92672">.&lt;/span>merge(ID_df&lt;span style="color:#f92672">.&lt;/span>rename(columns&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;longitude&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;start_lon&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;latitude&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;start_lat&amp;#34;&lt;/span>}),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>left_on&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;PULocationID&amp;#34;&lt;/span>, right_on&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;LocationID&amp;#34;&lt;/span>, how&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;left&amp;#34;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>drop(&lt;span style="color:#e6db74">&amp;#34;LocationID&amp;#34;&lt;/span>, axis&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df &lt;span style="color:#f92672">=&lt;/span> df&lt;span style="color:#f92672">.&lt;/span>merge(ID_df&lt;span style="color:#f92672">.&lt;/span>rename(columns&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;longitude&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;end_lon&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;latitude&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;end_lat&amp;#34;&lt;/span>}),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>left_on&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;DOLocationID&amp;#34;&lt;/span>, right_on&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;LocationID&amp;#34;&lt;/span>, how&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;left&amp;#34;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>drop(&lt;span style="color:#e6db74">&amp;#34;LocationID&amp;#34;&lt;/span>, axis&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>evaluate(df)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">return&lt;/span> df
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># NY内かをcheckする&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@timer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">in_NY&lt;/span>(df):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df &lt;span style="color:#f92672">=&lt;/span> df[(df[&lt;span style="color:#e6db74">&amp;#34;start_lon&amp;#34;&lt;/span>] &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">71.47&lt;/span>) &lt;span style="color:#f92672">&amp;amp;&lt;/span> (df[&lt;span style="color:#e6db74">&amp;#34;start_lon&amp;#34;&lt;/span>] &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">79.45&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df &lt;span style="color:#f92672">=&lt;/span> df[(df[&lt;span style="color:#e6db74">&amp;#34;start_lat&amp;#34;&lt;/span>] &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">40.29&lt;/span>) &lt;span style="color:#f92672">&amp;amp;&lt;/span> (df[&lt;span style="color:#e6db74">&amp;#34;start_lat&amp;#34;&lt;/span>] &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">45&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df &lt;span style="color:#f92672">=&lt;/span> df[(df[&lt;span style="color:#e6db74">&amp;#34;end_lon&amp;#34;&lt;/span>] &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">71.47&lt;/span>) &lt;span style="color:#f92672">&amp;amp;&lt;/span> (df[&lt;span style="color:#e6db74">&amp;#34;end_lon&amp;#34;&lt;/span>] &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">79.45&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df &lt;span style="color:#f92672">=&lt;/span> df[(df[&lt;span style="color:#e6db74">&amp;#34;end_lat&amp;#34;&lt;/span>] &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">40.29&lt;/span>) &lt;span style="color:#f92672">&amp;amp;&lt;/span> (df[&lt;span style="color:#e6db74">&amp;#34;end_lat&amp;#34;&lt;/span>] &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">45&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>evaluate(df)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">return&lt;/span> df
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">check_in_NY&lt;/span>(df, ID_df):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df &lt;span style="color:#f92672">=&lt;/span> add_coordinate(df, ID_df)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df &lt;span style="color:#f92672">=&lt;/span> in_NY(df)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">return&lt;/span> df
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>以上のようにデータを読み込み，型変換，列追加，異常値削除をする一連の処理を用意した．&lt;/p>
&lt;ol>
&lt;li>ファイルの読み込み&lt;/li>
&lt;li>日付データを文字列から日付型に変換&lt;/li>
&lt;li>前処理&lt;/li>
&lt;li>欠損値を削除&lt;/li>
&lt;li>乗客数のチェック&lt;/li>
&lt;li>groupbyで分布を確認&lt;/li>
&lt;li>1人以上を選択&lt;/li>
&lt;li>乗車時刻をチェック&lt;/li>
&lt;li>日付データから年月日時を取得し，列を追加&lt;/li>
&lt;li>年でgroupbyして，確認 → 該当年のみを選択&lt;/li>
&lt;li>月でgroupbyして，確認 → 1～12月のみを選択&lt;/li>
&lt;li>年，月でgroupbyして分布を確認&lt;/li>
&lt;li>乗車時間をcheck&lt;/li>
&lt;li>降車時刻と乗車時刻の差をとり，分に変換して列を追加（&lt;code>dt.total_second&lt;/code>がFireDucks未対応）&lt;/li>
&lt;li>現実的な乗車時間のデータを選択する&lt;/li>
&lt;li>乗車距離をチェック&lt;/li>
&lt;li>現実的な乗車距離のデータを選択する&lt;/li>
&lt;li>料金をチェック&lt;/li>
&lt;li>現実的な料金のデータを選択する&lt;/li>
&lt;li>NY市内のデータを選択&lt;/li>
&lt;li>乗降車のIDと，緯度経度のテーブルをマージする&lt;/li>
&lt;li>乗降車の緯度経度がNY市内となっているデータを選択&lt;/li>
&lt;/ol>
&lt;h2 id="pandasでの実行時間">pandasでの実行時間&lt;/h2>
&lt;p>まずはpandasでの実行時間を確認してみる．
測定には24コアXeonサーバー（Intel(R) Xeon(R) Gold 6226 CPU x 2，メインメモリ256GB）を用いた．&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> os
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data_path &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;data_sets&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fn &lt;span style="color:#f92672">=&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>join(data_path, &lt;span style="color:#e6db74">&amp;#34;taxi_all.csv&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ID_file &lt;span style="color:#f92672">=&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>join(data_path, &lt;span style="color:#e6db74">&amp;#34;ID_to_coordinate.csv&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>need_cols &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;tpep_pickup_datetime&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;tpep_dropoff_datetime&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;passenger_count&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;trip_distance&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#39;PULocationID&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;DOLocationID&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;total_amount&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;improvement_surcharge&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;extra&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;fare_amount&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;RatecodeID&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@timer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">Preprocessing&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df &lt;span style="color:#f92672">=&lt;/span> file_read(fn, {&lt;span style="color:#e6db74">&amp;#34;usecols&amp;#34;&lt;/span>: need_cols})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ID_df &lt;span style="color:#f92672">=&lt;/span> file_read(ID_file)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df &lt;span style="color:#f92672">=&lt;/span> txt_to_date(df, &lt;span style="color:#e6db74">&amp;#34;tpep_pickup_datetime&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df &lt;span style="color:#f92672">=&lt;/span> txt_to_date(df, &lt;span style="color:#e6db74">&amp;#34;tpep_dropoff_datetime&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df &lt;span style="color:#f92672">=&lt;/span> drop_na(df)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df &lt;span style="color:#f92672">=&lt;/span> check_passenger_c(df)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df &lt;span style="color:#f92672">=&lt;/span> check_pu_date(df)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df &lt;span style="color:#f92672">=&lt;/span> check_ride_time(df)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df &lt;span style="color:#f92672">=&lt;/span> check_trip_distance(df)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df &lt;span style="color:#f92672">=&lt;/span> check_total_amount(df)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df &lt;span style="color:#f92672">=&lt;/span> check_in_NY(df, ID_df)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>evaluate(df)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">return&lt;/span> df
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df &lt;span style="color:#f92672">=&lt;/span> Preprocessing()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>さて，pandasでの実行時間は下表のような結果になった．
&lt;code>file_read&lt;/code>が2件あるのはtaxiのデータの他に，マージ用の地点データも読み込んだためであり，&lt;code>txt_to_date&lt;/code>は乗車時間と降車時間の2件を変換したためである．
実行時間を見てみるとファイル読み込みに1分以上かかっていることが分かる．
さらに列の追加やmerge処理を含む&lt;code>check_pu_date&lt;/code>や&lt;code>add_coordinate&lt;/code>に30秒以上時間がかかっており，実装した前処理の実行時間は終了するまでに186秒かかっている．&lt;/p>
&lt;h2 id="fireducksでの実行時間">FireDucksでの実行時間&lt;/h2>
&lt;p>importするライブラリをpandasに置き換えてFireDucksを用いた場合の実行時間の計測を行う．&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>pip install fireducks
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>pandasの前処理計算のために記述した上記スクリプトはFireDucksがpandasとの互換性を持っているためにFireDucksをimportすれば，そのまま利用可能である．&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> fireducks.pandas &lt;span style="color:#66d9ef">as&lt;/span> pd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意点として，FireDucksはメソッドが呼ばれても処理をすぐには実行せず，結果が必要になった際にまとめて処理を実行する．
そのため，各メソッドの実行時間を計測するためには&lt;code>_evaliate()&lt;/code>を実行する必要がある．&lt;/p>
&lt;p>FireDucksをimportし，同様の前処理計算を実行するとpandasとの実行時間との比較の表は以下のようになった．&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">関数&lt;/th>
&lt;th style="text-align:right">pandas[sec]&lt;/th>
&lt;th style="text-align:right">FireDucks[sec]&lt;/th>
&lt;th style="text-align:right">速度向上率&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">&lt;code>file_read&lt;/code>&lt;/td>
&lt;td style="text-align:right">72.19&lt;/td>
&lt;td style="text-align:right">3.52&lt;/td>
&lt;td style="text-align:right">20.49&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>file_read&lt;/code>&lt;/td>
&lt;td style="text-align:right">0.003&lt;/td>
&lt;td style="text-align:right">0.01&lt;/td>
&lt;td style="text-align:right">0.38&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>txt_to_date&lt;/code>&lt;/td>
&lt;td style="text-align:right">9.07&lt;/td>
&lt;td style="text-align:right">19.10&lt;/td>
&lt;td style="text-align:right">0.48&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>txt_to_date&lt;/code>&lt;/td>
&lt;td style="text-align:right">8.57&lt;/td>
&lt;td style="text-align:right">20.57&lt;/td>
&lt;td style="text-align:right">0.42&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>drop_na&lt;/code>&lt;/td>
&lt;td style="text-align:right">3.13&lt;/td>
&lt;td style="text-align:right">0.70&lt;/td>
&lt;td style="text-align:right">4.47&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>check_passenger_c&lt;/code>&lt;/td>
&lt;td style="text-align:right">3.21&lt;/td>
&lt;td style="text-align:right">1.80&lt;/td>
&lt;td style="text-align:right">1.79&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>check_pu_date&lt;/code>&lt;/td>
&lt;td style="text-align:right">27.37&lt;/td>
&lt;td style="text-align:right">0.99&lt;/td>
&lt;td style="text-align:right">27.64&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>check_ride_time&lt;/code>&lt;/td>
&lt;td style="text-align:right">7.02&lt;/td>
&lt;td style="text-align:right">2.00&lt;/td>
&lt;td style="text-align:right">3.51&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>check_trip_distance&lt;/code>&lt;/td>
&lt;td style="text-align:right">3.24&lt;/td>
&lt;td style="text-align:right">0.91&lt;/td>
&lt;td style="text-align:right">3.55&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>check_total_amount&lt;/code>&lt;/td>
&lt;td style="text-align:right">3.11&lt;/td>
&lt;td style="text-align:right">0.93&lt;/td>
&lt;td style="text-align:right">3.59&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>add_coordinate&lt;/code>&lt;/td>
&lt;td style="text-align:right">28.32&lt;/td>
&lt;td style="text-align:right">1.67&lt;/td>
&lt;td style="text-align:right">16.97&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>in_NY&lt;/code>&lt;/td>
&lt;td style="text-align:right">20.75&lt;/td>
&lt;td style="text-align:right">2.71&lt;/td>
&lt;td style="text-align:right">7.65&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>Preprocessing&lt;/code>&lt;/td>
&lt;td style="text-align:right">186.02&lt;/td>
&lt;td style="text-align:right">54.92&lt;/td>
&lt;td style="text-align:right">3.39&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;code>file_read&lt;/code>についてpandasでは終了まで70秒以上かかっていたが約3.5秒となり20倍以上高速化ができていることが確認できた．
またその他の時間がかかっていた処理（&lt;code>check_pu_date&lt;/code>，&lt;code>add_coordinate&lt;/code>）についても大幅な時間短縮ができている．&lt;/p>
&lt;p>&lt;code>txt_to_date&lt;/code>についてはFireDucksを用いることで計算時間が増えている．
これは記事執筆時点において&lt;code>to_datetime()&lt;/code>関数はFireDucksによる高速化対応がされていないためである．
しかし，&lt;code>to_datetime()&lt;/code>のように高速化未対応な関数を呼ばれたときであってもFireDucksはpandasの関数を呼び出すことで計算を行うためエラーを返すことはない．&lt;/p>
&lt;p>本記事の前処理計算においてトータルの計算時間はpandasが186秒であったのに対し，FireDucksでは55秒で約3.4倍の実行速度であった．
さらにこの55秒のうち40秒程は高速化未対応の処理に要する時間であり，今後更なる高速化が見込まれる．&lt;/p></description></item><item><title>Posts: 導入事例：トヨタテクニカルディベロップメント株式会社様 「Spicy MINT」</title><link>https://fireducks-dev.github.io/ja/posts/ttdc/</link><pubDate>Thu, 19 Oct 2023 00:00:00 +0000</pubDate><guid>https://fireducks-dev.github.io/ja/posts/ttdc/</guid><description/></item></channel></rss>