<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>User Guide on</title><link>/en/docs/user-guide/</link><description>Recent content in User Guide on</description><generator>Hugo -- gohugo.io</generator><atom:link href="/en/docs/user-guide/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>/en/docs/user-guide/01-intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/docs/user-guide/01-intro/</guid><description>FireDucks has the same API as in pandas, so you can refer to the pandas documentation and articles to get started, or you can use LLM to output pandas code and run it in FireDucks.
This user guide is intended for those who want to learn more about FireDucks, explaining its inner workings and what is useful to know about it. In particular, the following points may seem strange to those who are familiar with pandas.</description></item><item><title>Execution Model</title><link>/en/docs/user-guide/02-exec-model/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/docs/user-guide/02-exec-model/</guid><description>The execution model of FireDucks differs from that of pandas. pandas is an eager execution model in which the process is executed immediately upon method invocation, while FireDucks is a lazy execution model in which the process is executed in batches when the results are needed.
Lazy execution model #
The following figure shows the execution images of pandas and FireDucks.
In pandas, for example, calling the read_csv method reads data from a CSV file.</description></item><item><title>Acceleration in FireDucks</title><link>/en/docs/user-guide/03-acceleration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/docs/user-guide/03-acceleration/</guid><description>There are two mechanisms to accelerate FireDucks. The first is compiler optimization on the IR, intermediate representation, and the second is multithreading on the backend.
Compiler Optimization #
FireDucks uses a runtime compiler mechanism to convert Python programs into an intermediate language before execution. Optimization on the intermediate language means that the Python program is converted to an intermediate language that can be executed faster without changing the meaning of the program, rather than being executed as-is.</description></item><item><title>pandas compatibility</title><link>/en/docs/user-guide/04-compatibility/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/docs/user-guide/04-compatibility/</guid><description>FireDucks provides the same API (class names, method names, and attribute names) as pandas, and aims for compatibility in terms of being able to use it simply by changing import statements.
Compatibility Concept #
We do not aim for compatibility in the following aspects.
Complete consistency of class names FireDucks provides a pandas-compatible API in the module fireducks.pandas. The complete class names, including module names, are different from those of pandas.</description></item><item><title>FireDucks Own API</title><link>/en/docs/user-guide/05-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/docs/user-guide/05-api/</guid><description>FireDucks has its own API that some pandas do not have. Here are some of them.
pandas conversion #
FireDucks DataFrame/Series has a to_pandas method that allows conversion to pandas data. This is useful, for example, when using an external library that accepts pandas data.
Also, fireducks.pandas.from_pandas can be used to convert pandas DataFrames/Series to FireDucks.
Explicit intermediate language execution #
FireDucks provides lazy execution. Lazy execution allows multiple APIs to be executed at once and is an important feature for speeding up the process through optimization on intermediate languages.</description></item><item><title>Tips</title><link>/en/docs/user-guide/tips/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/docs/user-guide/tips/</guid><description>The know-how of pandas, such as avoiding loops and apply, is also useful for FireDucks. Here are some tips to improve performance in FireDucks.
Avoid loops #
Looping out data from a DataFrame is slow, so it is better to use the DataFrame API as much as possible (this is also true for pandas).
For example, the following loop processes the elements of a Series one by one.
s = 0 for i in range(len(df)): if df[&amp;quot;A&amp;quot;].</description></item></channel></rss>